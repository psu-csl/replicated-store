- Log
  # We can think of Log as an unbounded producer-consumer queue. From this
  # perspective, the execute method below acts as the consume method of the
  # queue, and the commit method below acts as the produce method of the queue.
  # Technically, instances are inserted into the queue via the append method;
  # however, they do not become executable until they are committed by calling
  # commit on the instance. Wake-up happens only one way: the thread that
  # commits wakes up the executor thread who executes instances by calling the
  # execute method.
  #
  # Since the executor thread may block on calling the execute method of log, we
  # need to wake up the executor when we want to cleanly shut down the system.
  # To this end, the log has a running flag and a stop method that sets the
  # running flag to false and signals the condition variable upon which the
  # executor thread is sleeping (due to calling the execute method). The execute
  # method will return a nullopt after the log is stopped and the executor
  # method can exit upon receiving nullopt.

  # log invariants
  #
  # given that (1) the instances in the log must be executed in order, (2)
  # last_executed is the index of the last executed instance, and (3)
  # global_last_executed is the index of the last instance that was executed in
  # all peers, our log has the following invariants:
  #
  # (i1) global_last_executed <= last_executed
  # (i2) all instances in [global_last_executed, last_executed] are executed
  # (i3) there is no executed instance after last_executed.
  # (i4) there are no instances at indices < global_last_executed

  - types/protobufs:

    - protobuf Command: a key-value command. Fields of a Command are
      - type_: enum { get, put, del }
      - key_: string
      - value_: string (valid only if type_ == put)

    - protobuf Instance: an entry in the log. Fields of an Instance are:
      - ballot_: ballot of the instance
      - index_: index of the command in the log
      - client-id_: id of the client in the leader that issued the command
      - state_: enum { in-progress, committed, executed }
      - command_: Command

      Each Instance starts in the in-progress state, and changes to the
      committed state once quorum has voted for it, and changes to executed
      state once the executor thread has its command executed.

  - members

    - running_: boolean indicating whether the log is still running.

    - kv_store_: a reference to the key-value store used by the execute command
      for executing key-value commands from the log.

    - log_: a map from int to Instance.

    - last_index_: index of the highest-numbered instance in the log. the log
      starts at index 1; therefore, last_index_ is initialized to 0, signifying
      an empty log.

    - last_executed_: index of the last executed instance. initialized to 0.

    - global_last_executed_: index of the last executed instance on all peers
      known to this peer. initialized to 0.

    - mu_: the mutex of the Log object that needs to be acquired before the
      object is modified.

    - cv_executable_: the condition variable on which the execute method sleeps
      and which the commit method signals.

    - cv_committable_: the condition variable on which the commit method sleeps
      on rare occasions and the append method signals.

  - non-members functions

    - insert(log: *Log, instance: Instance) -> bool
      # description: inserts |instance| to |log| if possible, and returns true
      # if an instance was inserted to an empty slot;
      # also checks for safety violations.

      # case (1): |log| doesn't have an instance at instance.index_, in which
      # case we simply insert the instance to |log|.
      i = instance.index_
      if log_[i] == empty
        log_[i] = instance
        return true

      # case (2): |log| has a committed/executed instance at |instance.index|,
      # in which case insert should be a no-op, and the command in |log| should
      # match the command in |instance|.
      if log_[i].state_ == (committed or executed)
       assert(log[i].command_ == instance.command_) << "case2"
        return false

      # case (3): |log| has an in-progress instance at |instance.index|, in
      # which case insert should examine the ballot numbers of both instances.
      #
      # if |instance.ballot| > |log[i].ballot| insert replaces the instance
      # in |log| with |instance|.

      if instance.ballot > log[i].ballot
        log[i] = instance
        return false

      # if |instance.ballot| == |log[i].ballot| it must be the case that
      # |instance.command| == |log[i].command| and insert is a no-op.

      if instance.ballot_ == log[i].ballot
        assert(log[i].command_ == instance.command_) << "case3"

      # if |instance.ballot| < |log[i].ballot| insert ignores the instance
      # because it is stale.

      return false

  - public methods

    - constructor(kv_store: KVStore)
      running_ = true
      kv_store_ = kv_store
      log_ = empty map
      last_index_ = 0
      last_executed_ = 0
      global_last_executed_ = 0

    - last_executed(void) -> int
      acquire mu_ and release on exit
      return last_executed_

    - log(void) -> map from int to instance
      acquire mu_ and release on exit
      return log_

    - global_last_executed(void) -> int
      acquire mu_ and release on exit
      return global_last_executed_

    - advance_last_index(void) -> int
      acquire mu_ and release on exit
      return ++last_index_

    - set_last_index(last_index: int)
      acquire mu_ and release on exit
      last_index_ = last_index

    - last_index(void)
      acquire mu_ and release on exit
      return last_index_

    - stop()
      acquire mu_ and release on exit
      set running_ to false
      signal cv_executable_

    - append(instance: Instance)
      # description: appends an instance to the log; called from the
      # accept_handler which runs on a separate thread.

      mu_.lock()
      i = instance.index_
      if i <= global_last_executed_
        mu_.unlock()
        return

      if insert(&log_, instance)
        last_index_ = max(last_index_, i)
        cv_committable_.notify_all()

    - commit(index_: int)
      # sets the state of the instance at index to committed and possibly wakes
      # up the executor thread if the log is executable.

      # commit is called exclusively by the leader, after it sends out accept
      # to all peers, including itself, and receiving ok responses from the
      # quorum. the accept handler in every peer inserts an instance into the
      # log and then responds with an ok if successful. most of the time, the
      # leader will immediately receive an ok from its own rpc handler before
      # receiving ok from the remote peers; therefore, by the time it calls
      # commit, it is likely to have an instance at the index_, and calling
      # commit is fine. in the rare cases when the leader receives ok
      # responses from remote peers before itself, we wait on the condition
      # variable that will eventually be signalled by append called from
      # accept_handler.
      mu.lock()
      while log_[index] == empty
        cv_commitable_.wait()

      # when running prepare, we will ask peers, including ourselves, to send us
      # their log starting at their global_last_executed_ and merge those logs.
      # then we run accept on all instances in the merged log starting after
      # global_last_executed_. hence, we may run accept on an instance that is
      # already committed or even executed in our log. our accept handler will
      # not touch log_ for such instances but it will respond with an accept and
      # eventually, we may run commit for such instances, in which case we will
      # end up here. for those instances, commit must be a no-op. hence, we will
      # update an instance's state to committed only if it is in in-progress
      # state.
      if log_[index_].state == in-progress
        log_[index_].state = committed

      # we must do this check every time because it may be an instance that we
      # merged into our log from a remote peer that was already in committed
      # state. in this case, we should wake up the thread to execute the
      # instance on our state machine.
      if (executable())
        cv_executable_.notify_one()
      mu_.unlock()

    - execute() -> optional(client-id, result)
      # As described above, this method acts as a consume method of a
      # producer/consumer queue. Therefore, it sleeps until it is woken up by
      # someone calling commit (i.e. produce method of the queue). Once woken
      # up, it executes one instance, sets the state of the instance to
      # executed, increments last_executed_, and returns the result and the id
      # of the client that originated the command.
      mu_.lock()
      while running_ and not is_executable()
        cv_executable_.wait()

      if !running_:
        return nullopt

      instance = &log_[last_executed_+1]
      result = kv_store_.execute(instance.cmd)
      ++last_executed_
      return (instance.client-id_, result)

    - commit_until(leader_last_executed: int, ballot: int)
      # called from the heartbeat handler after receiving last_executed from the
      # leader (i.e. leader_last_executed). sets the state of all the instances
      # from last_executed_ until leader_last_executed and wakes up the executor
      # thread if necessary.
      #
      # since we send heartbeats to ourselves as well, commit_until will be
      # called on the leader as well, but it will most likely to have no effect
      # because the entries will be committed immediately after the leader
      # receives acks from the quorum.

      assert leader_last_executed >= 0
      assert ballot >= 0

      mu_.lock()
      for (int i = last_executed_ + 1; i <= leader_last_executed; ++i)
        # we may receive a heartbeat before we receive the accept message;
        # therefore, the heartbeat handler may run this function while there
        # is a gap in the log. when we see a gap, we break out of the loop and
        # try committing the next time we receive heartbeat from the leader;
        # hopefully, by that time, we will have received the accept message
        # and the gap will disappear.
        if (log_[i] == empty)
          break

        # |ballot| will determine whether we will commit instances in the log.
        # we can have three cases with respect to |ballot| and the ballot of
        # instances in the log after last_executed_:
        #
        # case (1) |ballot| is smaller: this is the impossible case because
        # commit_until is always called from the heartbeat_handler, which will
        # reject heartbeats with a lower ballot number than ours. we assert this
        # impossiblity below.
        assert(ballot >= log_[i].ballot_)

        # case (2) they are equal: this is the common case. as a follower, we
        # will usually have in-progress instances in our log; we will
        # receive |leader_last_executed| that is larger than last_executed_, and
        # we will catch up by committing instances in our own log.
        if (log_[i].ballot_ == ballot)
          log_[i].state = committed

        # case (3) |ballot| is larger: this is the uncommon case, and it can
        # happen as follows: (a) we experience a partition, (b) a new leader
        # emerges and establishes new commands for the instances that are
        # already in our log, and (b) we reconnect. in this scenario, we will
        # have stale commands in our log and we cannot commit them because it
        # will violate safety. in this scenario, we will do nothing and return,
        # and as a result, prevent global_last_executed_ from advancing, until a
        # new leader is elected, and that new leader replays every instance
        # since global_last_executed_ and we discover the new commands that we
        # missed during the partition.

      if (executable())
        cv_executable_.notify_one()
      mu_.unlock()

    - trim_until(leader_global_last_executed: int)
      # called from the heartbeat handler after receiving global_last_executed
      # from the leader (i.e. |leader_global_last_executed|). removes all
      # instances in [global_last_executed_+1, leader_global_last_executed] from
      # the log_.

      while global_last_executed_ < leader_global_last_executed
        ++global_last_executed_
        # case (1): the following assertion follows from the invariants (i1) and (i2)
        assert(log_[global_last_executed_].state == executed)
        del log_[global_last_executed_]

    - instances() -> Instance[]
      # return all instances in the log for a response to a prepare message;
      # since global_last_executed_ is the tail of the log and last_index_ is
      # the head of the log, we return all instances in-between.
      mu_.lock()
      instances = Instance[]
      for i = global_last_executed_ + 1; i <= last_index_; ++i
        if log_[i] != empty
          instances.append(log_[i])
      return instances

    - is_executable(void) -> bool
      # preconditions: mu_ must be held

      # returns true if the log contains an executable instance, i.e. the
      # instance right after last_executed_ is committed.
      return log_[last_executed_+1] != empty &&
        log_[last_executed_+1].state == committed

    # this method is used only in unit tests
    - at(index: int) -> pointer to instance
      return a constant pointer to the instance

  - unit tests

    - constructor
      - ensure that class members are initialized properly

    - insert
      - inserting a new instance in in-progress state returns true, and inserting
        an instance with the same ballot, command, and state at the same index, is
        a no-op and returns false

    - insert-update-in-progress
      - updating an in-progress instance with a higher ballot updates the instance
        and returns false

    - insert-update-committed
      - updating a committed instance is a no-op and returns false.

    - insert-stale
      - inserting a stale instance is a no-op returns false

    - insert-case2-committed (death test)
      - see case 2 in the description of insert

    - insert-case2-executed (death test)
      - see case 2 in the description of insert

    - insert-case3 (death test)
      - see case 3 in the description of insert

    - append
      - common case test: appended members appear in the log at correct indexes.

    - append-with-gap
      - if we leave a gap in the log by appending an instance at last_index_ + m,
        where m > 1, then last_index_ should be updated to last_index_ + m.

    - append-fill-gaps
      - if we leave a gap in the log by appending an instance at last_index_ + m,
        where m > 1, and then append an instance at k, where last_index_ < k < m,
        then last_index_ does not change because the append operation is filling a
        gap and not extending the log.

    - append-high-ballot-override
      - if log_[m] contains an instance with ballot = n and we append an instance
        at log_[m] with ballot = o, where o > n, then append should overwrite the
        instance in the log.

    - append-low-ballot-no-effect
      - if log_[m] contains an instance with ballot = n and we append an instance
        at log_[m] with ballot = o, where o < n, then append should have no
        effect.

    - commit
      - committing an instance should change its state to committed; if there is a
        gap between last_executed_ and committed instance, then the log should not
        become executable; otherwise, it should.

    - commit-before-append
      - committing an instance at the index that does not yet have an instance
        because append wasn't called yet (see commit function description above
        for when this can happen) should eventually succeed after append is
        called.

    - append-commit-execute
      - the common case of appending, committing, and executing an instance

    - append-commit-execute-out-of-order
      - append three instances in order, commit them in reverse order, and ensure
        that they are all executed.

    - commit-until
      - append instances at indexes 1, 2, and 3, and call commit_until with the
        same ballot number and leader_last_executed = 2, and ensure that instances
        1 and 2 are committed and 3 is not, and the log is executable.

    - commit-until-higher-ballot
      - append instances at indexes 1, 2, and 3, and call commit_until with a
        higher ballot number and leader_last_executed = 3, ensure that none of the
        instances committed and the log is not executable.

    - commit-until-case2 (death test)
      - see case 2 in the description of commit-until

    - commit-until-with-gap
      - append instances at indexes 1, 3, and 4, and call commit_until with the
        same ballot number and leader_last_executed = 4 and ensure that 1 is
        committed and 3 and 4 aren't, and the log is executable.

    - append-commit-until-execute
      - append instances at indexes 1, 2, and 3, and call commit_until with
        leader_last_executed = 3, and ensure that all instances are executed.

    - append-commit-until-execute-trim-until
      - append instances at indexes 1, 2, and 3, and call commit_until with the
        same ballot number and leader_last_executed = 3, and then call trim_until
        with leader_global_last_executed = 3, and ensure that all of the instances
        removed from the log.

    - append-at-trimmed-index
      - append instances at indexes 1 and 2, and call commit_until with the same
        ballot number and leader_global_last_executed = 2, and then call
        trim_until with leader_global_last_executed = 2 to move
        global_last_executed_ to 2. append an instance at index 1 and 2 again and
        ensure that it has no effect, i.e. there are no instances at index 1
        and 2.

    - instances-since-global-last-executed
      - append instances at indexes 1, 2, 3; call
        instances_since_global_last_executed and ensure that all instances are
        returned; call commit_until with the same ballot number and
        leader_last_executed = 2, and then call trim_until with
        leader_global_last_executed = 2 to move global_last_executed_ to 2. call
        instances_since_global_last_executed again, and ensure that only instance
        3 is returned.

    - calling-stop-unblock-executor
      - call execute in the executor thread and call stop in the main thread and
        check that nullopt is returned from execute call and the executor thread
        can be joined.
